import Head from 'next/head'
import { useRouter } from 'next/router'
import { Button, Box, createStyles, rem, Grid, AppShell, useMantineTheme } from '@mantine/core'
import { useState } from 'react'
import { Nav } from '../../components/Header'
const useStyles = createStyles((theme) => ({
  button: {
    display: 'block',
    lineHeight: 1,
    padding: `${rem(8)} ${rem(12)}`,
    borderRadius: theme.radius.sm,
    textDecoration: 'none',
    color: theme.colors.green[9],
    fontSize: theme.fontSizes.sm,
    fontWeight: 500,
    backgroundColor: theme.colors.green[0],
    '&:hover': {
      display: 'block',
      backgroundColor: theme.colors.green[2],
    },
  },
}))
export default function Home() {
  const theme = useMantineTheme()
  const { classes, cx } = useStyles()
  const [isHovered, setIsHovered] = useState(false)
  const router = useRouter()
  const initVisibility = [
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
  ]
  const [visibility, setVisibility] = useState(initVisibility)

  const handleHover = (index, value) => {
    let temp = [...visibility]
    temp[index] = value
    setVisibility(temp)
  }
  return (
    <>
      <Head>
        <title>r/IITH </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AppShell
          styles={{
            main: {
              background:
                theme.colorScheme === "dark"
                  ? theme.colors.dark[8]
                  : theme.colors.gray[0],
            },
          }}
          navbarOffsetBreakpoint="sm"
          header={<Nav  />}
        >
          
      <h1>Welcome to IITH</h1>
      <Box
        sx={{
          flexDirection: 'row',
          justifyContent: 'space-between',
          alignItems: 'center',
          width: '100%',
          padding: '10px',
        }}
      >
        <Grid columns={24}>
          {visibility.map((item, index) => {
            return (
              <>
                {index < 8 ? (
                  <>
                    <Grid.Col
                      key={index}
                      span={3}
                      onMouseEnter={() => handleHover(index, true)}
                      onMouseLeave={() => handleHover(index, false)}
                    >
                      <Button
                        style={{
                          visibility: visibility[index] ? 'visible' : 'hidden',
                        }}
                        className={classes.button}
                        component="a"
                        href={`/hostels/${index + 1}`}
                      >
                        Hostel {index + 1}
                      </Button>
                    </Grid.Col>
                    {(index + 1) % 4 == 0 ? (
                      <Grid.Col span={24}></Grid.Col>
                    ) : (
                      <Grid.Col span={3}></Grid.Col>
                    )}
                  </>
                ) : null}
              </>
            )
          })}
        </Grid>

        <Grid columns={10}>
          {visibility.slice(8, 10).map((item, index) => {
            return (
              <Grid.Col
                key={index}
                span={3}
                offset={2}
                onMouseEnter={() => handleHover(index + 8, true)}
                onMouseLeave={() => handleHover(index + 8, false)}
              >
                <Button
                  style={{
                    visibility: visibility[index + 8] ? 'visible' : 'visible',
                  }}
                  className={classes.button}
                  component="a"
                  href={`/hostels/${index + 9}`}
                >
                  Hostel {index + 9}
                </Button>
              </Grid.Col>
            )
          })}
        </Grid>
      </Box>
        </AppShell>
    </>
  )
}
